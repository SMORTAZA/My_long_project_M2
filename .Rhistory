permutated_design[,i] <- random_lables
}
colnames(permutated_design) <- c("Baseline","Ctrl","HNO3","M1","M2")
rownames(permutated_design) <- colnames(w_data)
permutated_design <- data.frame(permutated_design)
save(permutated_design, file = "./results/permutated_design.RData")
load('./results/permutated_design.RData')
Ctrl_permutated <- w_data[,c(permutated_design$Ctrl==1)]
HNO3_permutated <- w_data[,c(permutated_design$HNO3==1)]
M1_permutated <- w_data[,c(permutated_design$M1==1)]
M2_permutated <- w_data[,c(permutated_design$M2==1)]
perm_t.pval.CtrlvsHNO3 <- rowttests(cbind(Ctrl_permutated,HNO3_permutated), factor(c(1,1,1,1,1,2,2,2,2,2)))$p.value
perm_t.pval.HNO3vsM1 <- rowttests(cbind(HNO3_permutated,M1_permutated), factor(c(1,1,1,1,1,2,2,2,2,2)))$p.value
perm_t.pval.HNO3vsM2 <- rowttests(cbind(HNO3_permutated,M2_permutated), factor(c(1,1,1,1,1,2,2,2,2,2)))$p.value
perm_fc.CtrlvsHNO3 <- rowMeans(w_data[,permutated_design$Ctrl==1])-rowMeans(w_data[,permutated_design$HNO3==1])
perm_fc.HNO3vsM1 <- rowMeans(w_data[,permutated_design$HNO3==1])-rowMeans(w_data[,permutated_design$M1==1])
perm_fc.HNO3vsM2 <- rowMeans(w_data[,permutated_design$HNO3==1])-rowMeans(w_data[,permutated_design$M2==1])
plot(fc.CtrlvsHNO3, t.pval.CtrlvsHNO3, main = "Volcano Plot\nCtrl vs HNO3", log = "y",xlab = "M(log2 fold change)", ylab = "p-value", pch = 20, col = "blue")
points(perm_fc.CtrlvsHNO3, perm_t.pval.CtrlvsHNO3, type = "p", pch = 20, col = "red")
legend("topleft", col=c("red","blue"), legend=c("perm", "real"),pch=20,bg="white")
#
t1 <- 0.001
abline(h= t1)
which(t.pval.CtrlvsHNO3 < 0.001)
length(which(t.pval.CtrlvsHNO3 < 0.001))
length(which(perm_t.pval.CtrlvsHNO3 < 0.001))
t1 <- 0.005
abline(h= t1)
length(which(t.pval.CtrlvsHNO3 < 0.005))
length(which(perm_t.pval.CtrlvsHNO3 < 0.005))
length(which(perm_t.pval.CtrlvsHNO3 < 0.004))
length(which(t.pval.CtrlvsHNO3 < 0.004))
length(which(t.pval.CtrlvsHNO3 < 0.003))
length(which(perm_t.pval.CtrlvsHNO3 < 0.003))
length(which(perm_t.pval.CtrlvsHNO3 < 0.003))
length(which(perm_t.pval.CtrlvsHNO3 < 0.002))
length(which(t.pval.CtrlvsHNO3 < 0.003))
length(which(t.pval.CtrlvsHNO3 < 0.002))
length(which(t.pval.CtrlvsHNO3 < 0.0015))
length(which(perm_t.pval.CtrlvsHNO3 < 0.0015))
length(which(perm_t.pval.CtrlvsHNO3 < 0.001))
length(which(t.pval.CtrlvsHNO3 < 0.001))
length(which(t.pval.CtrlvsHNO3 < 0.001))
length(which(perm_t.pval.CtrlvsHNO3 < 0.001))
plot(fc.CtrlvsHNO3, t.pval.CtrlvsHNO3, main = "Volcano Plot\nCtrl vs HNO3", log = "y",xlab = "M(log2 fold change)", ylab = "p-value", pch = 20, col = "blue")
points(perm_fc.CtrlvsHNO3, perm_t.pval.CtrlvsHNO3, type = "p", pch = 20, col = "red")
legend("topleft", col=c("red","blue"), legend=c("perm", "real"),pch=20,bg="white")
#seuil t1
t1 <- 0.001
#verification du seuil
length(which(t.pval.CtrlvsHNO3 < 0.001)) #28 pvalues
length(which(perm_t.pval.CtrlvsHNO3 < 0.001)) #26 pvalues
abline(h= t1)
plot(fc.HNO3vsM1, t.pval.HNO3vsM1, main = "Volcano Plot\nHNO3 vs M1", log = "y",xlab = "M(log2 fold change)", ylab = "p-value", pch = 20, col = "blue")
points(perm_fc.HNO3vsM1, perm_t.pval.HNO3vsM1, type = "p", pch = 20, col = "red")
legend("topleft", col=c("red","blue"), legend=c("perm", "real"),pch=20,bg="white")
1e-02
t2 <-
#verification du seuil
length(which(t.pval.HNO3vsM1 < 0.01)) # pvalues
t2 <-
#verification du seuil
length(which(t.pval.HNO3vsM1 < 0.01)) # pvalues
length(which(t.pval.CtrlvsHNO3 < t1)) #28 pvalues
length(which(perm_t.pval.CtrlvsHNO3 < t1)) #26 pvalues
t2 <- 0.01
length(which(t.pval.HNO3vsM1 < t2)) # pvalues
length(which(perm_t.pval.HNO3vsM1 < t2)) # pvalues
t2 <- 1
length(which(t.pval.HNO3vsM1 < t2)) # pvalues
length(which(perm_t.pval.HNO3vsM1 < t2)) # pvalues
t2 <- 0.1
length(which(t.pval.HNO3vsM1 < t2)) # pvalues
length(which(perm_t.pval.HNO3vsM1 < t2)) # pvalues
t2 <- 0.01
length(which(t.pval.HNO3vsM1 < t2)) # pvalues
length(which(perm_t.pval.HNO3vsM1 < t2)) # pvalues
abline(h=t2)
plot(fc.HNO3vsM2, t.pval.HNO3vsM2, main = "Volcano Plot\nHNO3 vs M2", log = "y",xlab = "M(log2 fold change)", ylab = "p-value", pch = 20, col = "blue")
points(perm_fc.HNO3vsM2, perm_t.pval.HNO3vsM2, type = "p", pch = 20, col = "red")
legend("topleft", col=c("red","blue"), legend=c("perm", "real"),pch=20,bg="white")
t3 <- 0.001
length(which(t.pval.HNO3vsM2 < t3)) # pvalues
length(which(perm_t.pval.HNO3vsM2 < t3)) # pvalues
t3 <- 0.01
length(which(t.pval.HNO3vsM2 < t3)) # pvalues
length(which(perm_t.pval.HNO3vsM2 < t3)) # pvalues
t3 <- 0.1
length(which(t.pval.HNO3vsM2 < t3)) # pvalues
length(which(perm_t.pval.HNO3vsM2 < t3)) # pvalues
t3 <- 0.5
length(which(t.pval.HNO3vsM2 < t3)) # pvalues
length(which(perm_t.pval.HNO3vsM2 < t3)) # pvalues
t3 <- 0.05
length(which(t.pval.HNO3vsM2 < t3)) # pvalues
length(which(perm_t.pval.HNO3vsM2 < t3)) # pvalues
t2 <- 0.05
length(which(t.pval.HNO3vsM1 < t2)) # 634 pvalues
length(which(perm_t.pval.HNO3vsM1 < t2)) # 132 pvalues
plot(fc.HNO3vsM2, t.pval.HNO3vsM2, main = "Volcano Plot\nHNO3 vs M2", log = "y",xlab = "M(log2 fold change)", ylab = "p-value", pch = 20, col = "blue")
points(perm_fc.HNO3vsM2, perm_t.pval.HNO3vsM2, type = "p", pch = 20, col = "red")
legend("topleft", col=c("red","blue"), legend=c("perm", "real"),pch=20,bg="white")
#seuil t1
t3 <- 0.05
plot(fc.HNO3vsM2, t.pval.HNO3vsM2, main = "Volcano Plot\nHNO3 vs M2", log = "y",xlab = "M(log2 fold change)", ylab = "p-value", pch = 20, col = "blue")
points(perm_fc.HNO3vsM2, perm_t.pval.HNO3vsM2, type = "p", pch = 20, col = "red")
legend("topleft", col=c("red","blue"), legend=c("perm", "real"),pch=20,bg="white")
#seuil t1
t3 <- 0.05
length(which(t.pval.HNO3vsM2 < t3)) # pvalues
length(which(perm_t.pval.HNO3vsM2 < t3)) # pvalues
abline(h=t3)
t3 <- 0.01
length(which(t.pval.HNO3vsM2 < t3)) # pvalues
length(which(perm_t.pval.HNO3vsM2 < t3)) # pvalues
abline(h=t3)
t3 <- 0.001
length(which(t.pval.HNO3vsM2 < t3)) # pvalues
length(which(perm_t.pval.HNO3vsM2 < t3)) # pvalues
abline(h=t3)
t3 <- 0.01
length(which(t.pval.HNO3vsM2 < t3)) # pvalues
length(which(perm_t.pval.HNO3vsM2 < t3)) # pvalues
abline(h=t3)
plot(fc.HNO3vsM2, t.pval.HNO3vsM2, main = "Volcano Plot\nHNO3 vs M2", log = "y",xlab = "M(log2 fold change)", ylab = "p-value", pch = 20, col = "blue")
points(perm_fc.HNO3vsM2, perm_t.pval.HNO3vsM2, type = "p", pch = 20, col = "red")
legend("topleft", col=c("red","blue"), legend=c("perm", "real"),pch=20,bg="white")
#seuil t1
t3 <- 0.01
#verification du seuil
length(which(t.pval.HNO3vsM2 < t3)) # pvalues
length(which(perm_t.pval.HNO3vsM2 < t3)) # pvalues
abline(h=t3)
library(limma)
contrast.matrix <- makeContrasts(Ctrl-HNO3, HNO3-M1, HNO3-M2, levels=design)
fit <- lmFit(log2(w_data), design)
eBayesResultat <- eBayes(contrasts.fit(fit, contrast.matrix))
CtrlvsHNO3 <- eBayesResultat$p.value[,1]
HNO3vsM1 <- eBayesResultat$p.value[,2]
HNO3vsM2 <- eBayesResultat$p.value[,3]
top1 <- which(CtrlvsHNO3 <= t1)
top2 <- which(HNO3vsM1 <= t2)
top3 <- which(HNO3vsM2 <= t3)
length(top1)
length(top2)
length(top3)
top2
t2
t2 <- 0.01
top1 <- which(CtrlvsHNO3 <= t1)
top2 <- which(HNO3vsM1 <= t2)
top3 <- which(HNO3vsM2 <= t3)
length(top1)
length(top2)
length(top3)
t1 <= 0.01
t1 = 0.01
top1 <- which(CtrlvsHNO3 <= t1)
length(top1)
length(top1)
length(top2)
length(top3)
t1 <- 0.001
top1 <- which(CtrlvsHNO3 <= t1)
top2 <- which(HNO3vsM1 <= t2)
top3 <- which(HNO3vsM2 <= t3)
length(top1)
length(top2)
length(top3)
top1
names(top1)
top1_sondes <- names(top1)
top2_sondes <- names(top2)
top3_sondes <- names(top3)
top1_sondes
top2_sondes
top3_sondes
typeof(top1_sondes)
top1_sondes[1]
intersect(top1_sondes, top2_sondes, top3_sondes)
intersect(top1_sondes, top2_sondes)
intersect(top3_sondes, top2_sondes)
intersect(top1_sondes, top3_sondes)
load('./results/data.RData')
View(data)
names(data)
rownames(data)
data["16652079"]
data[16652079]
data$geneSymbol[16652079]
a = data$geneSymbol[16652079]
a
which(data$probe_id == 16652079)
data$geneSymbol[,1]
data$geneSymbol[1,]
data$geneSymbol[1]
data$geneSymbol[1]
a = data$geneSymbol[1]
a
print(a)
for (i in top1_sondes){
if (i in rownames(data)){
print(i)
}
}
rownames(data)
i
for (i in top1_sondes){
print(i)
}
typeof(data)
data$probe_id[2]
which(data$probe_id == "16650003")
data$geneSymbol[2]
a <- rep(data$geneSymbol[2])
a
a <- data$geneSymbol[2]
a <- data$geneSymbol[3]
a
a <- data$geneSymbol
a
which(a != NA)
which(a == NA)
a
a != NA
a == NA
a <- data$geneSymbol
which(a == "SDR16C5")
a[2]
a[45149]
b = vector(length = 10)
b
b[1] = 4
b
for (i in top1_sondes){
print(i)
}
for (i in top1_sondes){
print(i)
print(data$geneSymbol[which(data$probe_id == i)])
}
n = 0
gene_names_1 <- vector(length = length(top1_sondes))
gene_names_1
for (i in top1_sondes){
n = n + 1
print(i)
print(data$geneSymbol[which(data$probe_id == i)])
}
n = 0
gene_names_1 <- vector(length = length(top1_sondes))
for (i in top1_sondes){
n = n + 1
print(i)
print(data$geneSymbol[which(data$probe_id == i)])
gene_names_1[n] <- data$geneSymbol[which(data$probe_id == i)]
}
gene_names_1
n = 0
gene_names_1 <- vector(length = length(top1_sondes))
for (i in top1_sondes){
n = n + 1
print(i)
a <- data$geneSymbol[which(data$probe_id == i)]
print(a)
gene_names_1[n] <- data$geneSymbol[which(data$probe_id == i)]
}
n = 0
gene_names_1 <- vector(length = length(top1_sondes))
for (i in top1_sondes){
n = n + 1
print(i)
a <- data$geneSymbol[which(data$probe_id == i)]
print(a)
gene_names_1[n] <- a
}
gene_names_1
a
for (i in top1_sondes){
n = n + 1
#print(i)
a <- data$geneSymbol[which(data$probe_id == i)]
print(a)
gene_names_1[n] <- a
}
a
a[1]
a[0]
a[2]
a[3]
a
data <- as.matrix(data)
data
colnames(data)
data["probe_id"]
data$probe_id
load('./results/data.RData')
typeof(data)
source('~/My_project/src/code.R', echo=TRUE)
n = 0
gene_names_1 <- vector(length = length(top1_sondes))
for (i in top1_sondes){
n = n + 1
#print(i)
a <- data$geneSymbol[which(data$probe_id == i)]
print(a)
gene_names_1[n] <- a
}
gene_names_1
data$geneSymbol == 14890
which(data$geneSymbol == 14890)
gene_names_1
for (i in top1_sondes){
n = n + 1
#print(i)
a <- data$geneSymbol[which(data$probe_id == i)]
print(a)
b <- c(b,a)
gene_names_1[n] <- a
}
a
b
a <- data$geneSymbol
a
typeof(a)
a[5]
a <- vector(data$geneSymbol)
a <- data$geneSymbol
a <- vector(a)
a <- as.matrix(a)
a
a[2]
a[14149]
n = 0
gene_names_1 <- vector(length = length(top1_sondes))
for (i in top1_sondes){
n = n + 1
#print(i)
gene_symbol <- as.matrix(data$gene_Symbol)
a <- gene_symbol[which(data$probe_id == i)]
print(a)
b <- c(b,a)
gene_names_1[n] <- a
}
gene_symbol <- as.matrix(data$gene_Symbol)
gene_symbol
gene_symbol <- data$gene_Symbol
gene_symbol <- data$gene_Symbol
gene_symbol <- as.matrix(gene_symbol)
a <- data$geneSymbol
a <- as.matrix(a)
gene_symbol <- data$gene_Symbol
gene_symbol <- as.matrix(gene_symbol)
gene_symbol
gene_symbol <- data$gene_Symbol
gene_symbol
data$gene_Symbol
data
gene_symbol <- data$geneSymbol
gene_symbol <- as.matrix(gene_symbol)
n = 0
gene_names_1 <- vector(length = length(top1_sondes))
for (i in top1_sondes){
n = n + 1
#print(i)
gene_symbol <- data$geneSymbol
gene_symbol <- as.matrix(gene_symbol)
a <- gene_symbol[which(data$probe_id == i)]
print(a)
b <- c(b,a)
gene_names_1[n] <- a
}
gene_names_1
n = 0
gene_names_1 <- vector(length = length(top1_sondes))
for (i in top1_sondes){
n = n + 1
#print(i)
gene_symbol <- data$geneSymbol
gene_symbol <- as.matrix(gene_symbol)
gene_name <- gene_symbol[which(data$probe_id == i)]
gene_names_1[n] <- gene_name
}
n = 0
gene_names_2 <- vector(length = length(top2_sondes))
for (i in top2_sondes){
n = n + 1
#print(i)
gene_symbol <- data$geneSymbol
gene_symbol <- as.matrix(gene_symbol)
gene_name <- gene_symbol[which(data$probe_id == i)]
gene_names_2[n] <- gene_name
}
n = 0
gene_names_3 <- vector(length = length(top3_sondes))
for (i in top3_sondes){
n = n + 1
#print(i)
gene_symbol <- data$geneSymbol
gene_symbol <- as.matrix(gene_symbol)
gene_name <- gene_symbol[which(data$probe_id == i)]
gene_names_3[n] <- gene_name
}
gene_names_2
gene_names_3
intersect(gene_names_2,gene_names_3)
setdiff(gene_names_2,gene_names_3)
n = 0
gene_names_1 <- vector(length = length(top1_sondes))
for (i in top1_sondes){
n = n + 1
#print(i)
gene_symbol <- data$geneSymbol
gene_symbol <- as.matrix(gene_symbol)
gene_name <- gene_symbol[which(data$probe_id == i)]
gene_names_1[n] <- gene_name
capture.output(gene_name, file="Essai.txt")
}
capture.output(output, file="Essai.txt")
gene_names_1
n = 0
gene_names_1 <- vector(length = length(top1_sondes))
for (i in top1_sondes){
n = n + 1
#print(i)
gene_symbol <- data$geneSymbol
gene_symbol <- as.matrix(gene_symbol)
gene_name <- gene_symbol[which(data$probe_id == i)]
gene_names_1[n] <- gene_name
capture.output(gene_name, file="Essai.txt", append = TRUE)
}
n = 0
gene_names_1 <- vector(length = length(top1_sondes))
for (i in top1_sondes){
n = n + 1
#print(i)
gene_symbol <- data$geneSymbol
gene_symbol <- as.matrix(gene_symbol)
gene_name <- gene_symbol[which(data$probe_id == i)]
gene_names_1[n] <- gene_name
capture.output(gene_name, file="./results/CtrlvsHNO3.txt", append = TRUE)
}
#noms des genes pour la deuxième comparaison
n = 0
gene_names_2 <- vector(length = length(top2_sondes))
for (i in top2_sondes){
n = n + 1
#print(i)
gene_symbol <- data$geneSymbol
gene_symbol <- as.matrix(gene_symbol)
gene_name <- gene_symbol[which(data$probe_id == i)]
gene_names_2[n] <- gene_name
capture.output(gene_name, file="./results/HNO3vsM1.txt", append = TRUE)
}
#noms des genes pour la troisième comparaison
n = 0
gene_names_3 <- vector(length = length(top3_sondes))
for (i in top3_sondes){
n = n + 1
#print(i)
gene_symbol <- data$geneSymbol
gene_symbol <- as.matrix(gene_symbol)
gene_name <- gene_symbol[which(data$probe_id == i)]
gene_names_3[n] <- gene_name
capture.output(gene_name, file="./results/HNO3vsM2.txt", append = TRUE)
}
#
n = 0
gene_names_1 <- vector(length = length(top1_sondes))
for (i in top1_sondes){
n = n + 1
#print(i)
gene_symbol <- data$geneSymbol
gene_symbol <- as.matrix(gene_symbol)
gene_name <- gene_symbol[which(data$probe_id == i)]
gene_names_1[n] <- gene_name
#enregistrer ds un fichier le nom des genes
#capture.output(gene_name, file="./results/CtrlvsHNO3.txt", append = TRUE)
#enregistrer les probes
capture.output(i, file="./results/probes_CtrlvsHNO3.txt", append = TRUE)
}
#noms des genes pour la deuxième comparaison
n = 0
gene_names_2 <- vector(length = length(top2_sondes))
for (i in top2_sondes){
n = n + 1
#print(i)
gene_symbol <- data$geneSymbol
gene_symbol <- as.matrix(gene_symbol)
gene_name <- gene_symbol[which(data$probe_id == i)]
gene_names_2[n] <- gene_name
#enregistrer ds un fichier le nom des genes
#capture.output(gene_name, file="./results/HNO3vsM1.txt", append = TRUE)
#enregistrer les probes
capture.output(i, file="./results/probes_HNO3vsM1.txt", append = TRUE)
}
#noms des genes pour la troisième comparaison
n = 0
gene_names_3 <- vector(length = length(top3_sondes))
for (i in top3_sondes){
n = n + 1
#print(i)
gene_symbol <- data$geneSymbol
gene_symbol <- as.matrix(gene_symbol)
gene_name <- gene_symbol[which(data$probe_id == i)]
gene_names_3[n] <- gene_name
#enregistrer ds un fichier le nom des genes
#capture.output(gene_name, file="./results/HNO3vsM2.txt", append = TRUE)
#enregistrer les probes
capture.output(i, file="./results/probes_HNO3vsM2.txt", append = TRUE)
}
library(GOstats)
